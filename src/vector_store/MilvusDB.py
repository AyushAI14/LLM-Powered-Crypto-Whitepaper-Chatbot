# Milvus is a database that stores, indexes, and manages massive embedding vectors generated by deep neural networks and other machine learning (ML) models.
from src.embeddings.Embed import EmbeddingChunker
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_milvus import Milvus
import os


class Vectordb:
    def __init__(self,k):
        self.embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
        self.URI = "./milvus.db"
        self._initialize_store()
        self.k=k
        
    def _initialize_store(self):
        """Initialize Milvus Lite local database"""
        try:
            # Initialize Milvus Lite
            self.vector_store = Milvus(
                embedding_function=self.embeddings,
                connection_args={"uri": self.URI}
            )
            print(f"Milvus vector store initialized at: {self.URI}")
        except Exception as e:
            print(f"Error initializing Milvus vector store: {e}")
            raise
    
    def add_Document(self,documents):
        """
        Add LangChain documents to Milvus vector store
        """
        try:
            print(f"Adding {len(documents)} documents to Milvus...")

            # Add documents to Milvus collection
            self.vector_store.add_documents(documents)
            print("Documents successfully added to Milvus vector store")
        except Exception as e:
            print(f"Error while adding documents: {e}")
            raise
    
    def query(self, query_text: str):
        """
        Perform similarity search
        """
        try:
            print(f"Searching Milvus for: {query_text}")
            results = self.vector_store.similarity_search_with_score(query_text, k=self.k)
            for res, score in results:
                print(f"* [SIM={score:3f}] {res.page_content} [{res.metadata}]")
        except Exception as e:
            print(f"Query failed: {e}")
            return []
            
    def clear_store(self):
        """
        Delete the local Milvus DB file (session cleanup)
        """
        db_path = self.URI
        if os.path.exists(db_path):
            os.remove(db_path)
            print(f"Cleared Milvus database at {db_path}")
        else:
            print("No Milvus DB file found to delete.")

# db = Vectordb(2)
# embedder = EmbeddingChunker()
# splits = embedder.txt_splitter()
# db.add_Document(splits)
# Result = db.query("What is Bitcoin's consensus mechanism?")
# for r in Result:
#     print("->", r.page_content[:150])